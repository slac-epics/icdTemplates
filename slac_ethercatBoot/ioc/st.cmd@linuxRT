#!../../bin/_ARCH_/_APPNAME_

## You may have to change _APPNAME_ to something else
## everywhere it appears in this file

< envPaths

# ====================================================================
# Setup some additional environment variables
# ====================================================================
# Setup environment variables

# tag log messages with IOC name
# How to escape the "_IOC_" as the PERL program
# will try to replace it.
# So, uncomment the following and remove the backslash
epicsEnvSet("EPICS\_IOC\_LOG_CLIENT_INET","${IOC}")

# =====================================================================
# Set some facility specific MACROs for database instantiation below
# This is in effort to make IOCs Applications facility agnostic
# =====================================================================

# ============================================
# Set MACROS for EVRs
# ============================================
# FAC = SYS0 ==> LCLS1
# FAC = SYS1 ==> FACET

# System Location:
epicsEnvSet("LOCA","B34")

epicsEnvSet("IOC_NAME","VIOC:B34:MCXX")
epicsEnvSet(EVR_DEV1,"EVR:B34:MCXX")
epicsEnvSet(UNIT,"MCXX")
epicsEnvSet(FAC,"SYS0")

#epicsEnvSet(EVR_DEV2,"EVR:B34:EVYY")
#epicsEnvSet(UNIT,"EVYY")
#epicsEnvSet(FAC,"SYS0")
# ===========================================

# Need this path to EPICS BASE so that caRepeater can be started:
# Let's figure out a way to pass this one in via the IOC's
# initial startup.cmd: another job for hookIOC.py :)
# Not needed caRepeater is started up by laci for all IOCs at
# CPU boot up.
#epicsEnvSet(PATH,"${EPICS_BASE}/bin/_ARCH_")

# ========================================================
# Support Large Arrays/Waveforms; Number in Bytes
# Please calculate the size of the largest waveform
# that you support in your IOC.  Do not just copy numbers
# from other apps.  This will only lead to an exhaustion
# of resources and problems with your IOC.
# The default maximum size for a channel access array is
# 16K bytes.
# ========================================================
# Uncomment and set appropriate size for your application:
#epicsEnvSet("EPICS_CA_MAX_ARRAY_BYTES", "800000")

# END: Additional environment variables
# ====================================================================

cd ${TOP}
# ====================================================
## Register all support components
dbLoadDatabase("dbd/_APPNAME_.dbd",0,0)
_APPNAME__registerRecordDeviceDriver(pdbbase)
# ====================================================


###########################################################
# Initialize all hardware first                           #
###########################################################
# ======================================================
# Init EVR: To support Timing System Event Receiver
# ======================================================
# In this case this EVR is running in a PC under linux

# =====================================================================
# Setup for EVR:
# =====================================================================
# Add eevrmaConfigure for each VEVR before iocInit.
#
#    eevrmaConfigure <instance> <vevrDevName>
#
#    where instance = EVR instance, starting from 0, incrementing by 1
#                     for each subsequent card.  Only 1 EVR instance
#                    is allowed for Embedded EVRs.
#
# ======================================================================
# Debug interest level for EVR Driver
# ErDebug=100

# Here we have an VEVR
eevrmaConfigure(0, "/dev/vevr01")

# Add evrInitialize (after ErConfigure) if a fiducial routine will be
# registered before iocInit driver initialization:
#evrInitialize()
# ======= EVR Setup Complete ============================================

# ======================================================
# Init EtherCAT: To support Real Time fieldbus
# ======================================================

ecAsynInit("/tmp/sock1", 1000000)

# Creates port MOTOR0
# connected to ECASYN port LINMOTOR0
# 1 Axis
# 500 ms moving poll
# 1000 ms idle poll
LinmotCreateController(MOTOR0, LINMOTOR0, 1, 500, 1000)

# =======================================================
# Init APCI1710: To Addi-Data Real time position encoder
# =======================================================
APCI1710Config("apci1710", 0)




# Add evrInitialize (after ErConfigure) if a fiducial routine will be
# registered before iocInit driver initialization:
#evrInitialize()
# evrInitialize() is not registered with EPICS ioc shell.
# So, we will need to use cexpsh() to execute it. Like so,:
# cexpsh("-c",'evrInitialize()')

# ============================================================================


########################################################################
# BEGIN: Load the record databases
#######################################################################
# =====================================================================
# Load EVENT databases to support use of the timing system
# =====================================================================

dbLoadRecords("db/Pattern.db","IOC=${IOC_NAME},SYS="${FAC})

# PCI Express EVR300 or new SLAC EVR
dbLoadRecords("db/EvrPci.db","EVR=${EVR_DEV1},CRD=0,SYS=${FAC}")
dbLoadRecords("db/Pci-trig.db","IOC=${IOC_NAME},LOCA=${LOCA},UNIT=${UNIT},SYS=${FAC}")

# MRF PMC EVR 230
#dbLoadRecords("db/EvrPmc.db","EVR=${EVR_DEV1},CRD=0,SYS=${FAC}")
#dbLoadRecords("db/Pmc-trig.db","IOC=${IOC_NAME},LOCA=${LOCA},UNIT=${UNIT},SYS=${FAC}")

# BSA Data Source Simulator Databases
#dbLoadRecords("db/bsaSimulator.db","DEVICE=LEPTON")

# BSA Database for each data source from above
#dbLoadRecords("db/Bsa.db","DEVICE=LEPTON, ATRB=COUNTER")
#dbLoadRecords("db/Bsa.db","DEVICE=LEPTON, ATRB=SINE")


# =====================================================================
# Load iocAdmin databases to support IOC Health and monitoring
# =====================================================================
dbLoadRecords("db/iocAdminSoft.db","IOC=${IOC_NAME}")
dbLoadRecords("db/iocAdminScanMon.db","IOC=${IOC_NAME}")

# The following database is a result of a python parser
# which looks at RELEASE_SITE and RELEASE to discover
# versions of software your IOC is referencing
# The python parser is part of iocAdmin
dbLoadRecords("db/iocRelease.db","IOC=${IOC_NAME}")

# =====================================================================
# Load database for autosave status
# =====================================================================
dbLoadRecords("db/save_restoreStatus.db", "P=${IOC_NAME}:")

# ==================================================================================================
# Load Additional databases:
# ==================================================================================================
#dbLoadRecords("../../db/E1250-EC-UC.template", "DEVICE=JRECTEST:1,PORT=LINMOTOR0,SCAN=1 second")
dbLoadRecords("../../db/Fws-motor.db")
dbLoadRecords("../../db/APCI1710Counter.db")

# END: Loading the record databases
#####################################################################################################

# =====================================================================
## Begin: Setup autosave/restore
# =====================================================================

# ============================================================
# If all PVs don't connect continue anyway
# ============================================================
save_restoreSet_IncompleteSetsOk(1)

# ============================================================
# created save/restore backup files with date string
# useful for recovery.
# ============================================================
save_restoreSet_DatedBackupFiles(1)

# ============================================================
# Where to find the list of PVs to save
# ============================================================
# Where "/data" is an NFS mount point setup when linuxRT target 
# boots up.
set_requestfile_path("/data/${IOC}/autosave-req")

# ============================================================
# Where to write the save files that will be used to restore
# ============================================================
set_savefile_path("/data/${IOC}/autosave")

# ============================================================
# Prefix that is use to update save/restore status database
# records
# ============================================================
save_restoreSet_UseStatusPVs(1)
save_restoreSet_status_prefix("${IOC_NAME}:")

## Restore datasets
set_pass0_restoreFile("info_settings.sav")
set_pass1_restoreFile("info_settings.sav")

# =====================================================================
# End: Setup autosave/restore
# =====================================================================

# =====================================================================
# Channel Access Security:  
# This is required if you use caPutLog.
# Set access security file
# Load common LCLS Access Configuration File
< ${ACF_INIT}

# =============================================================
# Start EPICS IOC Process (i.e. all threads will start running)
# =============================================================
iocInit()

# =====================================================
# Turn on caPutLogging:
# Log values only on change to the iocLogServer:
caPutLogInit("${EPICS_CA_PUT_LOG_ADDR}")
caPutLogShow(2)
# =====================================================

## Start any sequence programs
#seq sncExample,"user=_USER_Host"

## ===========================================================
## Start autosave routines to save our data
## ===========================================================
# optional, needed if the IOC takes a very long time to boot.
#epicsThreadSleep( 1.0)

cd("/data/${IOC}/autosave-req")
iocshCmd("makeAutosaveFiles")

# Start the save_restore task
# save changes on change, but no faster
# than every 5 seconds.
# Note: the last arg cannot be set to 0
create_monitor_set("info_positions.req", 5 )
create_monitor_set("info_settings.req" , 30 )

# ===========================================================================

# ===========================================================================
# Setup Real-time priorities after iocInit for driver threads
# ===========================================================================
system("/bin/su root -c `pwd`/rtPrioritySetup.cmd")

cd ${IOC_BOOT}

# An example of using the CEXP Shell:
# cexpsh("-c",'printf("hello\n")')

